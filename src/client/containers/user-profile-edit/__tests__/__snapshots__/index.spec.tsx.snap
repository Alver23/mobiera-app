// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<UserProfileEdit /> should save a snapshot of the component 1`] = `
<View
  style={
    Object {
      "marginVertical": 8,
    }
  }
>
  <View>
    <UserAvatar
      image="http://localhost/img.png"
    />
    <View
      style={
        Object {
          "alignItems": "flex-end",
          "bottom": 24,
          "flex": 1,
          "position": "absolute",
          "width": "70%",
        }
      }
    >
      <Themed.Icon
        containerStyle={
          Object {
            "backgroundColor": "#ffffff",
            "borderRadius": 20,
            "elevation": 4,
            "padding": 4,
            "shadowColor": "#242424",
            "shadowOffset": Object {
              "height": 2,
              "width": 0,
            },
            "shadowOpacity": 1,
            "shadowRadius": 12,
          }
        }
        name="edit"
        size={32}
        type="material"
      />
    </View>
  </View>
  <UserForm
    defaultValues={
      Object {
        "avatar": "http://localhost/img.png",
        "email": "fake@fake.com",
        "id": 1,
        "name": "fake name",
      }
    }
    formSchema={
      ObjectSchema {
        "_blacklist": ReferenceSet {
          "list": Set {},
          "refs": Map {},
        },
        "_blacklistError": undefined,
        "_excludedEdges": Array [],
        "_nodes": Array [
          "password",
          "email",
          "name",
        ],
        "_sortErrors": [Function],
        "_typeError": [Function],
        "_whitelist": ReferenceSet {
          "list": Set {},
          "refs": Map {},
        },
        "_whitelistError": undefined,
        "conditions": Array [],
        "deps": Array [],
        "exclusiveTests": Object {},
        "fields": Object {
          "email": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {
              "email": false,
              "required": true,
            },
            "spec": Object {
              "abortEarly": true,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "name": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {
              "required": true,
            },
            "spec": Object {
              "abortEarly": true,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "password": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {
              "matches": false,
              "min": true,
              "required": true,
            },
            "spec": Object {
              "abortEarly": true,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
        },
        "spec": Object {
          "abortEarly": true,
          "nullable": false,
          "presence": "optional",
          "recursive": true,
          "strict": false,
          "strip": false,
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
        "type": "object",
      }
    }
    onSubmit={[MockFunction]}
  />
</View>
`;
